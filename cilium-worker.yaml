# Create the "loadmaster" namespace
apiVersion: v1
kind: Namespace
metadata:
  name: loadmaster
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium-worker-sa
  namespace: loadmaster
---
# Define a ClusterRole that allows access to Cilium nodes in the "kube-system" namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-access-role
  namespace: kube-system
rules:
- apiGroups: ["cilium.io"]
  resources: ["ciliumnodes"]
  verbs: ["get", "list"]
---
# Create a ClusterRoleBinding to associate the ClusterRole with the service account in the "loadmaster" namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-access-binding
  namespace: kube-system # FOOL!
subjects:
- kind: ServiceAccount
  name: cilium-worker-sa
  namespace: loadmaster
roleRef:
  kind: ClusterRole
  name: cilium-access-role
  apiGroup: rbac.authorization.k8s.io
---
# Define the "cilium-worker" CronJob within the "loadmaster" namespace
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cilium-worker-cronjob
  namespace: loadmaster
spec:
  schedule: "0 * * * *"  # Run every hour
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cilium-worker-sa
          volumes:
          - name: script-volume
            configMap:
              name: cilium-node-grab-configmap
          - name: output-volume
            emptyDir: {}
          - name: api-script-volume
            configMap:
              name: loadmaster-api-calls
          containers:
          - name: cilium-worker-container
            image: bitnami/kubectl
            command: ["/bin/sh", "-c"]
            args:
            - "kubectl get cn > /output/kube.log"
            volumeMounts:
            - name: output-volume
              mountPath: /output
            - name: script-volume
              mountPath: /config/scripts
          - name: curl-container
            image: curlimages/curl
            command: ["/bin/sh", "-c"]
            args:
            - >
              sleep 10 && awk 'NR > 1 { split($2, a, "."); printf "%s.%s.%s.%s/24\t%s\n", a[1], a[2], a[3], 0, $3 }' /output/kube.log > /output/awk.log
              && cp /config/scripts/api.sh /output/api.sh
              && chmod +x /output/api.sh
              && /output/api.sh && sleep 500
            volumeMounts:
            - name: output-volume
              mountPath: /output
            - name: api-script-volume
              mountPath: /config/scripts
          restartPolicy: OnFailure